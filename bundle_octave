#!/usr/bin/env bash

# bundle_octave - Create an Octave.app app bundle
#
# Prerequisites:
#
# You must have a global Homebrew installation on this computer, and its
# bin dir must be on your path.
#
# Hints:
#
# If you want to do your compilations single-threaded, which will be slower
# but produce more readable output, set the environment variable
# HOMEBREW_MAKE_JOBS=1 before running bundle_octave.

build_gui=y
build_devel=n
build_dmg=y
use_experimental=n
use_java=y
dmg_dir="build"
verbose=n
with_test=y
octave_version="4.4.0"
octave_formula_base="octave"
build_suffix=""
build_step=""
# exit_on_error should not be used, because it breaks with "read" calls
exit_on_error=n
do_trace=n
# be conservative regarding architectures
build_arch=core2

this_program=$(basename $0)
bundler_home=$(realpath $(dirname $0))


function usage() {

	cat <<EOHELP
 $this_program
 $this_program [OPTION] ...
 $this_program [OPTION ARG] ...

 Build an Octave application bundle for macOS.

 Several options are supported:

  Packaging options:
    -a, --dmg-dir <dir>
      Location to create DMG [$dmg_dir].
    -b, --build-dmg
      Build a DMG.
    -u, --build-suffix <suffix>
      Set a build version suffix [$build_suffix].
    -E, --ignore-errors
      Do not exit on errors.
    -h, -?, --help
      Display this help text.
    -t, --without-test
      Do not run 'make check'.
    -v, --verbose
      Verbose output, and list state of all options.
    -x, --trace
      Trace program execution (even more detail than --verbose).
    -s, --step <step>
      Run a single step of the build process (for debugging use).

  Octave build options:
    -f, --octave-formula <name>
      Base name of Octave formula to use [$octave_formula_base].
    -d, --build-devel
      Build the latest development snapshot.
    -X, --experimental
      Use the experimental Octave formula.
    -V, --octave-version <version>
      Version of Octave to build (affects formula choice) [$octave_version].
    -c, --cli-only
      Do not build the GUI.
    -J, --no-java
      Compile without Java support.
EOHELP
}

while [[ $1 != "" ]]; do
  case "$1" in
    -a|--dmg-dir)
        if [ $# -gt 1 ]; then
          dmg_dir=$2; shift 2
        else 
          echo "$1 requires an argument" >&2
          exit 1
        fi ;;
    -b|--build-dmg) build_dmg=y; shift 1;;
    -c|--cli-only) build_gui=n; shift 1;;
    -d|--build-devel) build_devel=y; shift 1;;
    -E|--ignore-errors) exit_on_error=n; shift 1;;
    -f|--octave-formula) 
        if [ $# -gt 1 ]; then
          octave_formula_base=$2; shift 2
        else 
          echo "$1 requires an argument" >&2
          exit 1
        fi ;;
    -g|--use-gcc) use_gcc=y; shift 1;;
    -h|--help|-\?) usage; exit 0;;
    -J|--no-java) use_java=n; shift 1;;
    -s|--step)
        if [ $# -gt 1 ]; then
          build_step=$2; shift 2
        else 
          echo "$1 requires an argument" >&2
          exit 1
        fi ;;
    -t|--without-test) with_test=n; shift 1;;
    -u|--build-suffix)
        if [ $# -gt 1 ]; then
          build_suffix=$2; shift 2
        else 
          echo "$1 requires an argument" >&2
          exit 1
        fi ;;
    -v|--verbose) verbose=y; shift 1;;
    -V|--octave-version)
        if [ $# -gt 1 ]; then
          octave_version=$2; shift 2
        else 
          echo "$1 requires an argument" >&2
          exit 1
        fi ;;
    -x|--trace) do_trace=y; shift 1;;
    -X|--experimental) use_experimental=y; shift 1;;
    --) shift; break;;
    *) 
      echo "Error: Invalid option: $1" >&2;
      echo "See $this_program --help for help."
      exit 1
      ;;
  esac
done

if [ "$exit_on_error" = "y" ]; then
  set -e
fi
if [ "$verbose" == "y" ]; then
  echo octave_formula_base = \"$octave_formula_base\"
  echo octave_version = \"$octave_version\"
  echo build_suffix = \"$build_suffix\"
	echo build_gui = \"$build_gui\"
	echo build_devel = \"$build_devel\"
	echo build_dmg = \"$build_gui\"
	echo dmg_dir = \"$dmg_dir\"
	echo use_gcc = \"$use_gcc\"
	echo use_java = \"$use_java\"
	echo with_test = \"$with_test\"
  echo octave_app_bundler_home = \"$bundler_home\"
	set -v
fi

if [ "$do_trace" == "y" ]; then
  set -x
fi

if [ -z "$octave_version" ]; then
  octave_formula="${octave_formula_base}"
  app_base_name="${octave_formula_base}"
else
  octave_formula="${octave_formula_base}@${octave_version}"
  app_base_name="${octave_formula_base} ${octave_version}"
fi
app_base_name="$(tr '[:lower:]' '[:upper:]' <<< ${app_base_name:0:1})${app_base_name:1}"
app_name="${app_base_name}"
if [ -n "$build_suffix" ]; then
  app_name="${app_name}-${build_suffix}"
fi
install_dir="/Applications/${app_name}.app"
install_dir_unstaged="${install_dir}-UNSTAGED"
echo "Building ${app_name}.app at ${install_dir}"

install_usr="$install_dir/Contents/Resources/usr"
brew="$install_usr/bin/brew"
app_build="build/${app_name}.app"
app_build_usr="$app_build/Contents/Resources/usr"

global_brew_prefix="$(brew --prefix)"

# set some environment variables
export HOMEBREW_OPTFLAGS="-march=core2"
PATH="$install_usr/bin/:$PATH"

function stage_app_build() {
  if [ -e "$install_dir" ]; then
    if [ -f "$install_dir/STAGING" ]; then
      echo "Looks like $app_name is already staged; re-using in place"
    else
      echo "Error: $install_dir exists, but is not a staged build." >&2
      echo "Error: Please move $install_dir out of the way before running $this_program" >&2
      exit 1
    fi
  elif [ -e "${install_dir_unstaged}" ]; then
    echo "Re-staging existing build dir from ${install_dir_unstaged}"
    mv "${install_dir_unstaged}" "$install_dir"
  else
    # Create new staged app
    echo "Creating new staged app build at $install_dir"
    osacompile -o "$install_dir" -e " "
    cat <<EOS > "$install_dir/STAGING"
This is not a real app!

This is a staged build for octave-app-bundler. If you find this at $install_dir, then
there was probably a failed build, and this directory needs to be manually deleted
or moved aside.
EOS
  fi
}

function unstage_app_build() {
  if [ ! -e "$install_dir/STAGING" ]; then
    echo "Error: $install_dir does not look like a staged build. Not moving." >&2
    exit 1
  fi
  if [ -e "${install_dir_unstaged}" ]; then
    echo "Error: There is already an unstaged app build at ${install_dir_unstaged}. Cannot un-stage." >&2
    exit 1
  fi
  mv "${install_dir}" "${install_dir_unstaged}"
  echo "Un-staged build to ${install_dir_unstaged}"
}

function install_global_tools() {
  # install utilities that octave-app-bundler itself needs into the global Homebrew
  # installation (to avoid possible conflicts with versioned icoutils etc
  # in octave's deps)
  # Commented out icoutils because it looks like that's not actually used now -apj
  #${global_brew_prefix}/bin/brew install trash icoutils
  ${global_brew_prefix}/bin/brew install trash
}

function freshen_staged_homebrew() {
  # check if we do full or update
  if [ -e "$install_usr/bin/brew" ]; then
  	install_type='update'
  else
  	install_type='full'
  fi

  if [ "$install_type" == "update" ]; then
    # update homebrew
  	echo "Updating existing Homebrew installation in $install_usr."
  else
  	# install homebrew
  	echo "Creating new Homebrew installation in $install_usr."
  	mkdir -p "$install_usr"
  	curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C "$install_usr/Homebrew"
    ln -s "$install_usr/Homebrew/bin/brew" "$install_usr/bin"
    "$brew" tap octave-app/octave-app
    "$brew" tap octave-app/octave-app-versions
    # Redirect the Homebrew prefix's var/ to system /var
    rm -rf "$install_usr/var"
    ln -s "/var" "$install_usr/var"
  fi

  "$brew" update # get new formulae
  "$brew" upgrade # compile new formulae
  "$brew" cleanup # remove old versions
  "$brew" prune # remove links

  # use Mac's (BSD) sed
  SED=/usr/bin/sed
  $SED -i '' "s/march=native/march=${build_arch}/g" "$install_usr/Homebrew/Library/Homebrew/extend/ENV/super.rb" 
  $SED -i '' "s/march=native/march=${build_arch}/g" "$install_usr/Homebrew/Library/Homebrew/extend/ENV/std.rb" 

  # get newest octave formula
  if [ "$use_experimental" == "y" ]; then
    curl https://raw.githubusercontent.com/schoeps/homebrew-core/master/Formula/octave.rb -o "$install_usr/Homebrew/Library/Taps/homebrew/homebrew-core/Formula/octave.rb"
  fi
}

function build_octave() {
  # set FC to point to GCC's gfortran
  export FC="$install_usr/bin/gfortran"

  # use GCC for all scientific libraries
  if [ "$use_gcc" == "y" ]; then
    export HOMEBREW_CC=gcc-6
    export HOMEBREW_CXX=g++-6
  fi

  # uninstall any old octave
  if [ -d "$install_usr/Cellar/$octave_formula" ]; then
    "$brew" uninstall "$octave_formula"
  fi

  # build octave
  octave_build_options=""
  if [ "$verbose" == "y" ]; then
  	octave_build_options="$octave_build_options --verbose"
  fi
  if [ "$build_devel" == "y" ]; then
  	octave_build_options="$octave_build_options --HEAD"
  fi
  if [ "$build_gui" != "y" ]; then
  	octave_build_options="$octave_build_options --without-qt"	
  fi
  if [ "$use_java" != "y" ]; then
  	octave_build_options="$octave_build_options --without-java"	
  fi
  if [ "$with_test" == "n" ]; then
  	octave_build_options="$octave_build_options --without-test"
  fi

  # finally build octave
  echo "$brew" install $octave_formula $octave_build_options
  "$brew" install $octave_formula $octave_build_options
}

function decorate_octave() {
  # get versions dynamically from the built program
  octave="$install_usr/bin/octave"
  oct_ver="$("$octave" --version | /usr/bin/sed -n 1p | /usr/bin/grep -o '\d\..*$' )"
  oct_ver_string="$("$octave" --version | /usr/bin/sed -n 1p)"
  oct_copy="$("$octave" --version | /usr/bin/sed -n 2p | /usr/bin/cut -c 15- )"

  echo "Octave versions: ver=${oct_ver} ver_string=${oct_ver_string} copy=${oct_copy}"

  # Set path for ghostscript
  gs_ver="$("$install_usr/bin/gs" --version)"
  gs_share="$install_usr/opt/ghostscript/share/ghostscript"
  export GS_OPTIONS="-sICCProfilesDir=$gs_share/$gs_ver/iccprofiles/ -sGenericResourceDir=$gs_share/$gs_ver/Resource/ -sFontResourceDir=$gs_share/$gs_ver/Resource/Font"

  # use local font cache instead of global one
  /usr/bin/sed -i '' 's/\/Applications.*fontconfig/~\/.cache\/fontconfig/g' "$install_usr/etc/fonts/fonts.conf" 

  # create applescript to execute octave
  tmp_script=$(mktemp /tmp/octave-XXXX);
  if [ "$build_gui" == "y" ]; then
  	read -r -d '' program_launch_code <<EOS
    set cmd to export_gs_options() & export_gnuterm() & export_path() & export_dyld() & run_octave_gui()
    do shell script cmd
EOS
  else
  	read -r -d '' program_launch_code <<EOS
    set cmd to export_gs_options() & export_gnuterm() & export_path() & run_octave_cli()
    tell application "Terminal"
      activate
      do script cmd
    end tell
EOS
  fi
  cat <<EOSCRIPT >> $tmp_script
  on export_gs_options()
    return "export GS_OPTIONS=\\"-sICCProfilesDir=$gs_share/$gs_ver/iccprofiles/ -sGenericResourceDir=$gs_share/$gs_ver/Resource/ -sFontResourceDir=$gs_share/$gs_ver/Resource/Font\\";"
  end export_gs_options

  on export_gnuterm()
    return "export GNUTERM=\\"qt\\";"
  end export_gnuterm

  on export_path()
    return "export PATH=\\"$install_usr/bin/:$PATH\\";"
  end export_path

  on export_dyld()
    return "export DYLD_FALLBACK_LIBRARY_PATH=\\"$install_usr/lib:/lib:/usr/lib\\";"
  end export_dyld

  on cache_fontconfig()
    set fileTarget to (path to home folder as text) & ".cache:fontconfig"
    try
      fileTarget as alias
    on error
      display dialog "Font cache not found, so first plotting will be slow. Create font cache now?" with icon caution buttons {"Yes", "No"}
      if button returned of result = "Yes" then
        do shell script "$install_usr/bin/fc-cache -frv;"
      end if
    end try
  end cache_fontconfig

  on run_octave_gui()
    return "cd ~;clear;$install_usr/bin/octave --force-gui | logger 2>&1;"
  end run_octave_gui

  on run_octave_cli()
    return "cd ~;clear;$install_usr/bin/octave;exit;"
  end run_octave_cli

  on run_octave_open(filename)
    return "cd ~;clear;$install_usr/bin/octave --persist --eval \\"edit " & filename & "\\" | logger 2>&1;"
  end run_octave_open

  on path_check()
    if not (POSIX path of (path to me) contains "$install_dir") then
      display dialog "Please run Octave from the $install_dir folder" with icon stop with title "Error" buttons {"OK"}
      error number -128
    end if
  end path_check

  on open argv
    path_check()
    cache_fontconfig()
    set filename to "\\"" & POSIX path of item 1 of argv & "\\""
    set cmd to export_gs_options() & export_gnuterm() & export_path() & export_dyld() & run_octave_open(filename)
    do shell script cmd
  end open

  on run
    path_check()
    cache_fontconfig()
    $program_launch_code
  end run
EOSCRIPT

  osacompile -o $install_dir/Contents/Resources/Scripts/main.scpt $tmp_script
  rm $tmp_script

  # create a nice iconset (using the icons shipped with octave)
  # the following might fail for the development version
  hicolor="$install_usr/opt/octave/share/icons/hicolor"
  svg_icon="$hicolor/scalable/apps/octave.svg"
  tmp_iconset="$(mktemp -d /tmp/iconset-XXXX)/droplet.iconset"
  mkdir -p "$tmp_iconset"
  cp "$hicolor/16x16/apps/octave.png" "$tmp_iconset/icon_16x16.png"
  cp "$hicolor/32x32/apps/octave.png" "$tmp_iconset/icon_16x16@2x.png"
  cp "$hicolor/32x32/apps/octave.png" "$tmp_iconset/icon_32x32.png"
  cp "$hicolor/64x64/apps/octave.png" "$tmp_iconset/icon_32x32@2x.png"
  cp "$hicolor/128x128/apps/octave.png" "$tmp_iconset/icon_128x128.png"
  cp "$hicolor/256x256/apps/octave.png" "$tmp_iconset/icon_128x128@2x.png"
  cp "$hicolor/256x256/apps/octave.png" "$tmp_iconset/icon_256x256.png"
  cp "$hicolor/512x512/apps/octave.png" "$tmp_iconset/icon_256x256@2x.png"
  cp "$hicolor/512x512/apps/octave.png" "$tmp_iconset/icon_512x512.png"
  iconutil -c icns -o "$install_dir/Contents/Resources/applet.icns" "$tmp_iconset"

  # create or update entries in the application's plist
  defaults write "$install_dir/Contents/Info" NSUIElement 1
  defaults write "$install_dir/Contents/Info" CFBundleIdentifier org.octave.Octave 
  defaults write "$install_dir/Contents/Info" CFBundleShortVersionString "$oct_ver"
  defaults write "$install_dir/Contents/Info" CFBundleVersion "$oct_ver_string"
  defaults write "$install_dir/Contents/Info" NSHumanReadableCopyright "$oct_copy"
  defaults write "$install_dir/Contents/Info" CFBundleDocumentTypes -array '{"CFBundleTypeExtensions" = ("m"); "CFBundleTypeOSTypes" = ("Mfile"); "CFBundleTypeRole" = "Editor";}'    
  plutil -convert xml1 "$install_dir/Contents/Info.plist"
  chmod a=r "$install_dir/Contents/Info.plist"

  # add icon to octave-gui
  if [ "$build_gui" == "y" ]; then
  	export python_script=$(mktemp /tmp/octave-XXXX);
  	echo <<EOSCRIPT > $python_script
  #!/usr/bin/env python
  import Cocoa
  import sys
  Cocoa.NSWorkspace.sharedWorkspace().setIcon_forFile_options_(Cocoa.NSImage.alloc().initWithContentsOfFile_(sys.argv[1].decode("utf-8")), sys.argv[2].decode("utf-8"), 0) or sys.exit("Unable to set file icon")
EOSCRIPT
  	/usr/bin/python "$python_script" "$install_dir/Contents/Resources/applet.icns" $install_usr/Cellar/${octave_formula}/*/libexec/octave/*/exec/*/octave-gui
  fi

  # force all formulas to be linked and list them in the DEPENDENCIES file
  echo "" > "$install_dir/Contents/Resources/DEPENDENCIES"
  "$brew" list -1 | while read line
  do
  	"$brew" unlink $line
  	"$brew" link --force $line
  	"$brew" info $line | /usr/bin/sed -e 's$: .*$$g' | /usr/bin/sed -e 's$/Applications.*$$g' | /usr/bin/head -n3 >> "$install_dir/Contents/Resources/DEPENDENCIES"
  	echo "" >> "$install_dir/Contents/Resources/DEPENDENCIES"
  done
}

function prune_app() {
  echo "Building pruned app at $app_build"
  mkdir -p build
  rm -rf "$app_build"
  cp -pR "$install_dir" build

  # Remove formulae known to be build-time-only dependencies
  app_build_brew="$app_build_usr/bin/brew"

  # Remove Homebrew itself
  rm -rf "$app_build_usr/Homebrew"
  # Remove STAGING so you can tell it's a real built app now
  rm -rf "$app_build/STAGING"
}

function create_dmg() {
  # create a nice DMG disc image with create-dmg (MIT License)
  echo "Building DMG"
  dmg_filename="$app_name.dmg"

	# put existing DMG into Trash
	if [ -f "$dmg_dir/$dmg_filename" ]; then
	  echo "Moving existing $dmg_dir/$dmg_filename into the Trash"
	  trash "$dmg_dir/$dmg_filename"
	fi

  if [ ! -d $app_build ]; then
    echo "Error: No app build present at $app_build. Please run the build and prune first." >&2
    exit 1
  fi

	# Run create-dmg; this may issue warnings if run headless. However, the dmg
	# will still be created, only some beautification cannot be applied.
  # We manually set the image size because create-dmg's automatic sizing seems to
  # get it wrong, and we run out of space when adding files.
	"${bundler_home}/create-dmg/create-dmg" \
  	  --volname "${app_name}-Installer" \
  	  --volicon "$app_build/Contents/Resources/applet.icns" \
  	  --window-size 550 442 \
  	  --icon-size 48 \
  	  --icon ${app_name}.app 125 180 \
    	--hide-extension ${app_name}.app \
    	--app-drop-link 415 180 \
    	--eula "$app_build_usr/opt/${octave_formula}/README" \
    	--add-file COPYING "$app_build_usr/opt/${octave_formula}/COPYING" 126 300 \
    	--add-file DEPENDENCIES "$app_build/Contents/Resources/DEPENDENCIES" 415 300 \
    	--disk-image-size 2000 \
    	--background "${bundler_home}/background.tiff" \
    	"$dmg_dir/$dmg_filename" \
    	"$app_build" 

	echo DMG ready: $dmg_dir/$dmg_filename
}

#  Main program

if [ -z "$build_step" ]; then
  # Run entire build process
  install_global_tools
  stage_app_build
  freshen_staged_homebrew
  build_octave
  decorate_octave
  prune_app
  if [ "$build_dmg" == "y" ]; then
    create_dmg
  fi
  unstage_app_build
else
  case "$build_step" in
    install-global)   install_global_tools ;;
    stage)            stage_app_build ;;
    freshen-homebrew) freshen_staged_homebrew ;;
    build)            build_octave ;;
    decorate)         decorate_octave ;;
    prune)            prune_app ;;
    dmg)              create_dmg ;;
    unstage)          unstage_app_build ;;
    *)
      echo "Error: Invalid step name '$build_step'" >&2
      echo "Error: Valid steps are: install-global stage freshen-homebrew build dmg unstage" >&2
      exit 1
      ;;
  esac
fi
