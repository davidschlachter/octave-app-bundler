#!/usr/bin/env bash

# bundle_octave - Create an Octave.app app bundle
#
# Hints:
#
# If you want to do your compilations single-threaded, which will be slower
# but produce more readable output, set the environment variable
# HOMEBREW_MAKE_JOBS=1 before running bundle_octave.

build_gui=y
build_devel=n
build_dmg=y
use_java=y
verbose=n
with_test=n
variant=""
build_suffix=""
build_step=""
exit_on_error=y
do_trace=n
do_sign=n
# be conservative regarding target CPU architecture
build_arch=core2
action=

# define these if we need to use a special branch of Homebrew
brew_remote_name=
brew_remote_url=
brew_remote_branch=

this_program=$(basename $0)
bundler_home=$(realpath $(dirname $0))


function usage() {

  cat <<EOHELP
 $this_program
 $this_program [OPTION] ...
 $this_program [OPTION ARG] ...

 Build an Octave application bundle for macOS.

 Several options are supported:

  Packaging options:
    -u, --build-suffix <suffix>
      Set a build version suffix [$build_suffix].
    -h, -?, --help
      Display this help text.
    -s, --step <step>
      Run a single step of the build process (for debugging use).
    -v, --verbose
      Verbose output, and list state of all options.
    -x, --trace
      Trace program execution (even more detail than --verbose).
    -e, --exit-on-errors
      Exit on errors. For debugging use only; may be confusing.
    -t, --with-test
      Do not run tests on completed app.
    --sign
      Sign the completed app bundle.

  Octave build options:
    -a, --variant <variant>
      Variant of Octave to build [$variant].
    -V, --octave-version <version>
      Version of Octave to build (affects formula choice) [$octave_version].
    -c, --cli-only
      Do not build the GUI.
    -J, --no-java
      Compile without Java support.
    -d, --build-devel
      Build the latest development snapshot.
EOHELP
}

while [[ $1 != "" ]]; do
  case "$1" in
    -a|--variant)
        if [ $# -gt 1 ]; then
          variant=$2; shift 2
        else 
          echo "$1 requires an argument" >&2
          exit 1
        fi ;;
    -c|--cli-only) build_gui=n; shift 1;;
    -d|--build-devel) build_devel=y; shift 1;;
    -E|--ignore-errors) exit_on_error=n; shift 1;;
    -f|--octave-formula) 
        if [ $# -gt 1 ]; then
          octave_formula_base=$2; shift 2
        else 
          echo "$1 requires an argument" >&2
          exit 1
        fi ;;
    -g|--use-gcc) use_gcc=y; shift 1;;
    -h|--help|-\?) usage; exit 0;;
    -J|--no-java) use_java=n; shift 1;;
    -s|--step)
        if [ $# -gt 1 ]; then
          build_step=$2; shift 2
        else 
          echo "$1 requires an argument" >&2
          exit 1
        fi ;;
    --sign) do_sign=y; shift 1;;
    -t|--with-test) with_test=y; shift 1;;
    -u|--build-suffix)
        if [ $# -gt 1 ]; then
          build_suffix=$2; shift 2
        else 
          echo "$1 requires an argument" >&2
          exit 1
        fi ;;
    -v|--verbose) verbose=y; shift 1;;
    -V|--octave-version)
        if [ $# -gt 1 ]; then
          octave_version=$2; shift 2
        else 
          echo "$1 requires an argument" >&2
          exit 1
        fi ;;
    -x|--trace) do_trace=y; shift 1;;
    --) shift; break;;
    brew)
      action="brew"
      shift 1
      break
      ;;
    *) 
      echo "Error: Invalid option: $1" >&2;
      echo "See $this_program --help for help."
      exit 1
      ;;
  esac
done

if [ "$exit_on_error" = "y" ]; then
  set -e
fi
if [ "$verbose" == "y" ]; then
  echo variant = \"$variant\"
  echo octave_version = \"$octave_version\"
  echo build_suffix = \"$build_suffix\"
  echo build_gui = \"$build_gui\"
  echo build_devel = \"$build_devel\"
  echo build_dmg = \"$build_gui\"
  echo dmg_dir = \"$dmg_dir\"
  echo use_gcc = \"$use_gcc\"
  echo use_java = \"$use_java\"
  echo with_test = \"$with_test\"
  echo octave_app_bundler_home = \"$bundler_home\"
fi

if [ "$do_trace" == "y" ]; then
  set -x
fi

# Bash 3 does not have associative arrays, so we need to do the
# version lookup with a function
function pick_default_octave_version() {
  if [ "$octave_formula_base" == "octave-octave-app" ]; then
    octave_version="4.4.0"
  elif [ "$octave_formula_base" == "octave-unversioned" ]; then
    octave_version=""
  else
    echo "Error: Variant '${variant}' has no default version defined. You must supply one." >&2
    exit 1
  fi
}

if [ -z "$variant" ]; then
  octave_formula_base="octave-octave-app"
  app_base_name_base="octave"
else
  octave_formula_base="octave-$variant"
  app_base_name_base="${octave_formula_base}"
fi
# Pick default version for variant
if [ -z "${octave_version}" ]; then
  pick_default_octave_version
fi
if [ -z "$octave_version" ]; then
  octave_formula="${octave_formula_base}"
  app_base_name="${app_base_name_base}"
else
  octave_formula="${octave_formula_base}_${octave_version}"
  app_base_name="${app_base_name_base}-${octave_version}"
fi
app_base_name="$(tr '[:lower:]' '[:upper:]' <<< ${app_base_name:0:1})${app_base_name:1}"
app_name="${app_base_name}"
if [ -z "$build_suffix" ]; then
  dmg_name="${app_name}.dmg"
else
  dmg_name="${app_name}-${build_suffix}.dmg"
fi
install_dir="/Applications/${app_name}.app"
install_dir_unstaged="${install_dir}-UNSTAGED"

install_usr="$install_dir/Contents/Resources/usr"
brew="$install_usr/bin/brew"
trash="$install_usr/bin/trash"
app_build="./build/${app_name}.app"
app_build_usr="$app_build/Contents/Resources/usr"

if [ "$verbose" == "y" ]; then
  echo octave_formula_base = \"$octave_formula_base\"
  echo octave_formula = \"$octave_formula\"
  echo app_base_name_base = \"$app_base_name_base\"
  echo app_base_name = \"$app_base_name\"
  echo app_name = \"$app_name\"
  echo install_dir = \"$install_dir\"
fi

echo "Building ${app_name}.app at ${install_dir} from formula ${octave_formula}"

# set some environment variables
export HOMEBREW_OPTFLAGS="-march=${build_arch}"
PATH="$install_usr/bin/:$PATH"

function stage_app_build() {
  if [ -e "$install_dir" ]; then
    if [ -f "$install_dir/STAGING" ]; then
      echo "Looks like $app_name is already staged; re-using in place"
    else
      echo "Error: $install_dir exists, but is not a staged build." >&2
      echo "Error: Please move $install_dir out of the way before running $this_program" >&2
      exit 1
    fi
  elif [ -e "${install_dir_unstaged}" ]; then
    echo "Re-staging existing build dir from ${install_dir_unstaged}"
    mv "${install_dir_unstaged}" "$install_dir"
  else
    # Create new staged app
    echo "Creating new staged app build at $install_dir"
    osacompile -o "$install_dir" -e " "
    cat <<EOS > "$install_dir/STAGING"
This is not a real app!

This is a staged build for octave-app-bundler. If you find this at $install_dir, then
there was probably a failed build, and this directory needs to be manually deleted
or moved aside.
EOS
  fi
}

function unstage_app_build() {
  if [ ! -e "$install_dir/STAGING" ]; then
    echo "Error: $install_dir does not look like a staged build. Not moving." >&2
    exit 1
  fi
  if [ -e "${install_dir_unstaged}" ]; then
    echo "Error: There is already an unstaged app build at ${install_dir_unstaged}. Cannot un-stage." >&2
    exit 1
  fi
  mv "${install_dir}" "${install_dir_unstaged}"
  echo "Un-staged build to ${install_dir_unstaged}"
}

function require_staged_app_build() {
  if [ ! -e "$install_dir/STAGING" ]; then
    echo "Error: This step requires a staged app build, but there is no app build staged at $install_dir." >&2
    if [ -n "$build_step" ]; then
      echo "Error: Please run $this_program -s stage to stage one and then retry." >&2
    fi
    exit 1
  fi  
}

function freshen_staged_homebrew() {
  require_staged_app_build
  # Check if we do full or update
  if [ -e "$install_usr/bin/brew" ]; then
    install_type='update'
  else
    install_type='full'
  fi

  if [ "$install_type" == "update" ]; then
    # Update homebrew
    echo "Updating existing Homebrew installation in $install_usr."
  else
    # Install homebrew
    echo "Creating new Homebrew installation in $install_usr."
    mkdir -p "$install_usr/Homebrew"
    mkdir -p "$install_usr/bin" "$install_usr/var" "$install_usr/lib"
    curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C "$install_usr/Homebrew"
    ln -s "$install_usr/Homebrew/bin/brew" "$install_usr/bin/brew"
    if [ -n "$brew_remote_branch" ]; then
      (
        echo "Checking out $brew_remote_branch from $brew_remote_url"
        "$brew" update
        cd "$install_usr/Homebrew"
        git remote add "$brew_remote_name" "$brew_remote_url"
        git fetch --all
        git checkout "$brew_remote_branch"
      )
    fi
    "$brew" tap octave-app/octave-app
    "$brew" tap octave-app/octave-app-bases
  fi

  "$brew" update # get new formulae
  "$brew" upgrade # compile new formulae
  "$brew" cleanup # remove old versions
  "$brew" prune # remove links

  # Make sure trash is installed
  if ! "$brew" ls | grep trash >/dev/null; then
    "$brew" install trash
  fi

  # Force conservative architecture builds in ENV
  SED=/usr/bin/sed
  $SED -i '' "s/ARGV.build_bottle\?/true/g" "$install_usr/Homebrew/Library/Homebrew/extend/ENV/super.rb" 
  $SED -i '' "s/ARGV.build_bottle\?/true/g" "$install_usr/Homebrew/Library/Homebrew/extend/ENV/std.rb" 
}

function build_octave() {
  require_staged_app_build
  # Set FC to point to GCC's gfortran
  export FC="$install_usr/bin/gfortran"

  # Use GCC for all scientific libraries
  if [ "$use_gcc" == "y" ]; then
    export HOMEBREW_CC=gcc-6
    export HOMEBREW_CXX=g++-6
  fi

  # Build octave
  octave_build_options=""
  if [ "$verbose" == "y" ]; then
    octave_build_options="$octave_build_options --verbose"
  fi
  if [ "$build_devel" == "y" ]; then
    octave_build_options="$octave_build_options --HEAD"
  fi
  if [ "$build_gui" != "y" ]; then
    octave_build_options="$octave_build_options --without-qt" 
  fi
  if [ "$use_java" != "y" ]; then
    octave_build_options="$octave_build_options --without-java" 
  fi
  if [ "$with_test" == "n" ]; then
    octave_build_options="$octave_build_options --without-test"
  fi

  # Finally build octave
  echo "$brew" install $octave_formula $octave_build_options
  "$brew" install $octave_formula $octave_build_options

  # Grab the logs
  rm -rf build/logs
  mkdir -p build/logs
  if [ -e "$HOME/Library/Logs/Homebrew/$octave_formula" ]; then
    cp -pR "$HOME/Library/Logs/Homebrew/$octave_formula" build/logs
  fi
  if [ -e "$install_usr/opt/$octave_formula/make-check.log" ]; then
    cp "$install_usr/opt/$octave_formula/make-check.log" build/logs
  fi
}

function munge_build() {
  require_staged_app_build
  echo "Munging app build at $app_build"
  # Get versions dynamically from the built program
  octave="$install_usr/bin/octave"
  oct_ver="$("$octave" --version | /usr/bin/sed -n 1p | /usr/bin/grep -o '\d\..*$' )"
  oct_ver_string="$("$octave" --version | /usr/bin/sed -n 1p)"
  oct_copy="$("$octave" --version | /usr/bin/sed -n 2p | /usr/bin/cut -c 15- )"

  echo "Octave versions: ver='${oct_ver}' ver_string='${oct_ver_string}' copy='${oct_copy}'"

  # Set path for ghostscript
  gs_ver="$("$install_usr/bin/gs" --version)"
  gs_opt=$("$brew" --prefix "ghostscript_${gs_ver}")
  gs_share="$gs_opt/share/ghostscript"

  # Make a local copy for munging
  mkdir -p build
  rm -rf "$app_build"
  cp -cpR "$install_dir" build

  # Use local font cache instead of global one
  /usr/bin/sed -i '' 's/\/Applications.*fontconfig/~\/.cache\/fontconfig/g' "$app_build_usr/etc/fonts/fonts.conf" 

  # Create applescript to execute octave
  tmp_script=$(mktemp /tmp/octave-XXXX);
  if [ "$build_gui" == "y" ]; then
    read -r -d '' program_launch_code <<EOS || true
    set cmd to env_setup_cmd() & run_octave_gui()
    do shell script cmd
EOS
  else
    read -r -d '' program_launch_code <<EOS || true
    set cmd to env_setup_cmd() & run_octave_cli()
    tell application "Terminal"
      activate
      do script cmd
    end tell
EOS
  fi
  cat <<EOSCRIPT >> $tmp_script
  on env_setup_cmd()
    export_gs_options() & export_gnuterm() & export_fc() & export_path() & export_dyld()
  end env_setup_cmd

  on export_gs_options()
    return "export GS_OPTIONS=\\"-sICCProfilesDir=$gs_share/$gs_ver/iccprofiles/ -sGenericResourceDir=$gs_share/$gs_ver/Resource/ -sFontResourceDir=$gs_share/$gs_ver/Resource/Font\\";"
  end export_gs_options

  on export_gnuterm()
    return "export GNUTERM=\\"qt\\";"
  end export_gnuterm

  on export_path()
    return "export PATH=\\"$install_usr/bin/:$PATH\\";"
  end export_path

  on export_dyld()
    return "export DYLD_FALLBACK_LIBRARY_PATH=\\"$install_usr/lib:/lib:/usr/lib\\";"
  end export_dyld

  on export_fc()
    return "export FC=\\"$install_usr/bin/gfortran\\"; export F77=\\"$install_usr/bin/gfortran\\";"
  end export_fc

  on cache_fontconfig()
    set fileTarget to (path to home folder as text) & ".cache:fontconfig"
    try
      fileTarget as alias
    on error
      display dialog "Font cache not found, so first plotting will be slow. Create font cache now?" with icon caution buttons {"Yes", "No"}
      if button returned of result = "Yes" then
        do shell script "$install_usr/bin/fc-cache -frv;"
      end if
    end try
  end cache_fontconfig

  on run_octave_gui()
    return "cd ~;clear;$install_usr/bin/octave --force-gui | logger 2>&1;"
  end run_octave_gui

  on run_octave_cli()
    return "cd ~;clear;$install_usr/bin/octave;exit;"
  end run_octave_cli

  on run_octave_test_suite()
    return "cd ~;clear;$install_usr/bin/octave --no-window-system --eval '__run_test_suite__' > ~/octave-app-fntest.log 2>&1;exit;"
  end run_octave_test_suite

  on run_octave_open(filename)
    return "cd ~;clear;$install_usr/bin/octave --persist --eval \\"edit " & filename & "\\" | logger 2>&1;"
  end run_octave_open

  on path_check()
    if not (POSIX path of (path to me) contains "$install_dir") then
      display dialog "Please run Octave from the $install_dir folder" with icon stop with title "Error" buttons {"OK"}
      error number -128
    end if
  end path_check

  on open argv
    path_check()
    cache_fontconfig()
    set filename to "\\"" & POSIX path of item 1 of argv & "\\""
    set cmd to env_setup_cmd() & run_octave_open(filename)
    do shell script cmd
  end open

  on run argv
    path_check()
    cache_fontconfig()
    if argv contains "--run-test-suite" then
      set cmd to env_setup_cmd() & run_octave_test_suite()
      do shell script cmd
    else
      $program_launch_code
    end
  end run
EOSCRIPT

  osacompile -o $app_build/Contents/Resources/Scripts/main.scpt $tmp_script
  rm $tmp_script

  # Create a nice iconset (using the icons shipped with octave)
  # The following might fail for the development version
  hicolor="$app_build_usr/opt/${octave_formula}/share/icons/hicolor"
  svg_icon="$hicolor/scalable/apps/octave.svg"
  tmp_iconset="$(mktemp -d /tmp/iconset-XXXX)/droplet.iconset"
  mkdir -p "$tmp_iconset"
  cp "$hicolor/16x16/apps/octave.png" "$tmp_iconset/icon_16x16.png"
  cp "$hicolor/32x32/apps/octave.png" "$tmp_iconset/icon_16x16@2x.png"
  cp "$hicolor/32x32/apps/octave.png" "$tmp_iconset/icon_32x32.png"
  cp "$hicolor/64x64/apps/octave.png" "$tmp_iconset/icon_32x32@2x.png"
  cp "$hicolor/128x128/apps/octave.png" "$tmp_iconset/icon_128x128.png"
  cp "$hicolor/256x256/apps/octave.png" "$tmp_iconset/icon_128x128@2x.png"
  cp "$hicolor/256x256/apps/octave.png" "$tmp_iconset/icon_256x256.png"
  cp "$hicolor/512x512/apps/octave.png" "$tmp_iconset/icon_256x256@2x.png"
  cp "$hicolor/512x512/apps/octave.png" "$tmp_iconset/icon_512x512.png"
  iconutil -c icns -o "$app_build/Contents/Resources/applet.icns" "$tmp_iconset"

  # Create or update entries in the application's plist  
  plistbuddy=/usr/libexec/PlistBuddy
  info_plist="$app_build/Contents/Info.plist"
  chmod a+w "$app_build/Contents/Info.plist"
  $plistbuddy -c "Add :NSUIElement integer 1" "$info_plist"
  $plistbuddy -c "Add :CFBundleIdentifier string org.octave-app.Octave" "$info_plist"
  $plistbuddy -c "Add :CFBundleShortVersionString string $oct_ver" "$info_plist"
  $plistbuddy -c "Add :CFBundleVersion string \"$oct_ver_string\"" "$info_plist"
  $plistbuddy -c "Add :NSHumanReadableCopyright string \"$oct_copy\"" "$info_plist"
  $plistbuddy -c "Add :CFBundleDocumentTypes dict" "$info_plist"
  $plistbuddy -c "Add :CFBundleDocumentTypes:CFBundleTypeExtensions array" "$info_plist"
  $plistbuddy -c "Add :CFBundleDocumentTypes:CFBundleTypeExtensions: string \"m\"" "$info_plist"
  $plistbuddy -c "Add :CFBundleDocumentTypes:CFBundleTypeOSTypes array" "$info_plist"
  $plistbuddy -c "Add :CFBundleDocumentTypes:CFBundleTypeOSTypes: string \"Mfile\"" "$info_plist"
  $plistbuddy -c "Add :CFBundleDocumentTypes:CFBundleTypeRole string \"Editor\"" "$info_plist"
  plutil -convert xml1 "$app_build/Contents/Info.plist"
  chmod a=r "$app_build/Contents/Info.plist"

  # Add icon to octave-gui
  if [ "$build_gui" == "y" ]; then
    export python_script=$(mktemp /tmp/octave-XXXX);
    cat <<EOSCRIPT > $python_script
#!/usr/bin/env python
import Cocoa
import sys
Cocoa.NSWorkspace.sharedWorkspace().setIcon_forFile_options_(Cocoa.NSImage.alloc().initWithContentsOfFile_(sys.argv[1].decode("utf-8")), sys.argv[2].decode("utf-8"), 0) or sys.exit("Unable to set file icon")
EOSCRIPT
    /usr/bin/python "$python_script" "$app_build/Contents/Resources/applet.icns" $app_build_usr/Cellar/${octave_formula}/*/libexec/octave/*/exec/*/octave-gui
  fi

  # List all formulae in the VERSIONS file
  versions_file="$app_build/Contents/Resources/VERSIONS"
  rm -f "${versions_file}"
  touch "${versions_file}"
  octave_app_str="Octave.app"
  if [ -n "$variant" ]; then
    octave_app_str="${octave_app_str} (variant ${variant})"
  fi
  octave_app_str="${octave_app_str}, version $oct_ver"
  if [ -n "${build_suffix}" ]; then
    octave_app_str="${octave_app_str}, build ${build_suffix}"
  fi
  echo "Octave.app version: ${octave_app_str}"
  echo "This is ${octave_app_str}" >> "${versions_file}"
  echo "" >> "$versions_file"
  "$brew" octave-app-list-formulae >> "${versions_file}"

  # Remove formulae known to be build-time-only dependencies
  app_build_brew="$app_build_usr/bin/brew"
  # These are some more packages we might need to add back in
  # cmake pkg-config
  # TODO: Detect which of these are actually installed, and remove them
  # NOTE: qt is only here because it shows up in manually-managed debug bulds
  "$app_build_brew" rm trash lzip qt_5.11.1 || true

  # Remove Homebrew itself
  rm -rf "$app_build_usr/Homebrew"
  rm -f "$app_build_usr/etc/bash_completion.d/brew" \
      "$app_build_usr/share/man/man1/README.md" \
      "$app_build_usr/share/man/man1/brew-cask.1" \
      "$app_build_usr/share/man/man1/brew.1" \
      "$app_build_usr/share/doc/homebrew" \
      "$app_build_usr/share/zsh/site-functions/_brew_cask" \
      "$app_build_usr/share/zsh/site-functions/_brew" \
      "$app_build_usr/bin/brew"

  # Remove STAGING so you can tell it's a real built app now
  rm -rf "$app_build/STAGING"

  # Redirect the app prefix's var/ to system local /var
  # Commented out because it seems to break code signing
  #rm -rf "$app_build_usr/var"
  #ln -s "/usr/local/var" "$app_build_usr/var"

  # Clear resource fork and Finder information that codesign doesn't like
  xattr -rc "$app_build" || true
}

function sign_app() {
  # Signing apparently must happen in installation location to make codesign happy
  # with its internal symlinks.
  if [[ -e "$install_dir" ]]; then
    echo >&2 "Error: file exists at $install_dir. Cannot stage app to sign."
    exit 1
  fi
  mv "$app_build" "$install_dir"
  # Let's try making all symlinks absolute to get validation to work
  file_list=$(mktemp /tmp/octave-XXXXX)
  find "$install_dir" -type l | sort > $file_list
  while read link; do
    link_dir=$(dirname "$link")
    link_target=$(readlink "$link")
    (
      cd "$link_dir"
      real_target=$(realpath "$link_target")
      rm "$link"
      ln -s "$real_target" "$link"
    )
  done <${file_list}
  # Do the actual signing
  codesign -s "Andrew Janke" -v "$install_dir"
  mv "$install_dir" "$app_build"
}

function create_dmg() {
  # Create a nice DMG disc image with create-dmg (MIT License)
  echo "Building DMG"
  dmg_dir=build

  if [ ! -d "$app_build" ]; then
    echo "Error: No app build present at $app_build. Please run the build and munge steps first." >&2
    exit 1
  fi

  # Delete existing DMG
  if [ -f "$dmg_dir/$dmg_name" ]; then
    echo "Deleting existing $dmg_dir/$dmg_name"
    rm -rf "$dmg_dir/$dmg_name"
  fi

  # Run create-dmg; this may issue warnings if run headless. However, the dmg
  # will still be created, only some beautification cannot be applied.
  # We manually set the image size because create-dmg's automatic sizing seems to
  # get it wrong, and we run out of space when adding files.
  octave_app_tap="$install_usr/Homebrew/Library/Taps/octave-app/homebrew-octave-app"
  "${bundler_home}/create-dmg/create-dmg" \
      --volname "${app_name}" \
      --volicon "${app_build}/Contents/Resources/applet.icns" \
      --window-size 550 500 \
      --icon-size 48 \
      --icon ${app_name}.app 125 180 \
      --hide-extension ${app_name}.app \
      --app-drop-link 415 180 \
      --eula "${octave_app_tap}/assets/COPYING/COPYING.rtf" \
      --add-file COPYING "${octave_app_tap}/assets/COPYING" 126 300 \
      --add-file VERSIONS "${app_build}/Contents/Resources/VERSIONS" 415 300 \
      --disk-image-size 2000 \
      --background "${bundler_home}/assets/background.tiff" \
      "$dmg_dir/$dmg_name" \
      "$app_build" 

  echo DMG ready: $dmg_dir/$dmg_name
}

function test_app() {
  echo "Running test suite on built app..."
  if [ ! -d "$app_build" ]; then
    echo "Error: No app build present at $app_build. Please run the build and munge steps first." >&2
    exit 1
  fi
  if [ -d "$install_dir" ]; then
    echo "An Octave.app already exists at $install_dir" >&2
    echo "Please move it out of the way and then try test again."
    exit 1
  fi

  mv "$app_build" "$install_dir"
  osascript "$install_dir/Contents/Resources/Scripts/main.scpt" --run-test-suite
  mv "$install_dir" "$app_build"
}

# Main program

# Handle special "actions" first
if [ -n "$action" ]; then
  case "$action" in
    brew)
      stage_app_build
      "$brew" "$@"
      exit_status=$?
      unstage_app_build
      exit $exit_status
      ;;
    *)
      echo "Error: Invalid action: '$action'" >&2
      exit 1
      ;;
  esac
fi

if [ -z "$build_step" ]; then
  # Run entire build process
  stage_app_build
  freshen_staged_homebrew
  build_octave
  munge_build
  if [[ "$do_sign" == "y" ]]; then
    unstage_app_build
    sign_app
    stage_app_build
  fi
  if [[ "$build_dmg" == "y" ]]; then
    create_dmg
  fi
  unstage_app_build
  if [[ "$with_test" == "y" ]]; then
    test_app
  fi
  echo "Build finished."
else
  # Run a single step
  case "$build_step" in
    stage)            stage_app_build ;;
    freshen-homebrew) freshen_staged_homebrew ;;
    build)            build_octave ;;
    munge)            munge_build ;;
    unstage)          unstage_app_build ;;
    sign)             sign_app ;;
    dmg)              create_dmg ;;
    test)             test_app ;;
    *)
      echo "Error: Invalid step name '$build_step'" >&2
      echo "Error: Valid steps are: stage freshen-homebrew build munge dmg unstage" >&2
      exit 1
      ;;
  esac
fi
